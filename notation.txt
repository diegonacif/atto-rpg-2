// char architecture //

attributes {
  strength { value: 10 },
  dexterity { value: 10 },
  intelligence { value: 10 },
  health { value: 10 },
  hit-points { value: 10 },
  will { value: 10 },
  perception { value: 10 },
  fatigue-points { value: 10 }
}

perks {
  uid { 
    description: "",
    points: 0
  }
}

flaws {
  uid { 
    description: "",
    points: 0
  }
}

skills {
  uid {
    description: "",
    mods: 0,
    nh: 0,
    relative: "",
    points: 0
  }
}

equips {
  uid {
    description: "",
    weight: 0,
    cost: 0
  }
}

// Flow //

user > char selector > char

// Steps //

(ok) Mudar código para um registro inicial da primeira linha de cada categoria, exceto attributes.
(ok) Implementar uid para criação de chars e derivados.
(ok) Listar e deletar chars no char selector.
(ok) Criar lógica para calcular custos dos atributos.
(ok) Verificação de alteração nos atributos com relação ao banco atual
(ok) Salva alterações nos atributos.
(ok) Ao excluir chars, entrada permanesce no banco porque existem documentos nas suas subcoleções. Criar função para solucionar.
(ok) Dados estáticos de perks, flaws e skills precisam estar disponíveis.
(ok) CRUD Vantagens
(ok) CRUD Desvantagens
() CRUD Perícias
() Criar contexto que controla as informações que entram e saem do database.
() Linkar cada uma das categorias, com sua página específica.
() 

obs: 
* lembrar dos tokens de design.
* pra alterar hexágonos quando ativos, alterar background-color do hexágono da camada mais abaixo.



* renderizar cada documento salvo no banco, no formato de linha.
* modal das vantagens
* botão para adicionar nova linha
* ao clicar em cada linha, abrir um modal para editar, salvar ou excluir linha
